---
// interface Props {
//     name: string;
//     fill?: boolean;
//     size?: string;
//     color?: string;
//     [key: string]: any;
// }

// const { name, fill, size = "24px", color, ...attributes } = Astro.props;
// const iconStyle = fill ? "-fill" : "";

// const { default: innerHTML } = await import(
//     `../assets/symbols/rounded/${name}${iconStyle}.svg?raw`
// ).catch(async () => {
//     // Fallback icon if the specified icon is not found
//     const { default: fallbackInnerHTML } = await import(
//         `../assets/symbols/rounded/emoji_symbols.svg?raw`
//     );
//     return { default: fallbackInnerHTML };
// });

interface Props {
    name: string;
    fill?: boolean;
    variant?: "filled" | "outlined" | "round" | "sharp" | "two-tone";
    size?: string;
    color?: string;
    [key: string]: any;
}

const {
    name,
    fill,
    variant: userVariant,
    size = "24px",
    color,
    ...attributes
} = Astro.props;

const variant = userVariant ?? (fill ? "filled" : "outlined");

function normalize(n: string) {
    return n
        .trim()
        .replace(/([a-z0-9])([A-Z])/g, "$1_$2")
        .replace(/[-\s]+/g, "_")
        .toLowerCase();
}
const normalizedName = normalize(name);

// Cargamos cada carpeta por separado con ruta relativa
const iconModules = {
    ...import.meta.glob(
        "../../node_modules/@material-design-icons/svg/filled/*.svg",
        { as: "raw", eager: true },
    ),
    ...import.meta.glob(
        "../../node_modules/@material-design-icons/svg/outlined/*.svg",
        { as: "raw", eager: true },
    ),
    ...import.meta.glob(
        "../../node_modules/@material-design-icons/svg/round/*.svg",
        { as: "raw", eager: true },
    ),
    ...import.meta.glob(
        "../../node_modules/@material-design-icons/svg/sharp/*.svg",
        { as: "raw", eager: true },
    ),
    ...import.meta.glob(
        "../../node_modules/@material-design-icons/svg/two-tone/*.svg",
        { as: "raw", eager: true },
    ),
} as Record<string, string>;

function getIcon(variant: string, baseName: string): string | undefined {
    const directKey = `../../node_modules/@material-design-icons/svg/${variant}/${baseName}.svg`;
    if (iconModules[directKey]) return iconModules[directKey];

    // fallback bÃºsqueda por sufijo
    const foundKey = Object.keys(iconModules).find((k) =>
        k.endsWith(`/${variant}/${baseName}.svg`),
    );
    return foundKey ? iconModules[foundKey] : undefined;
}

let innerHTML =
    getIcon(variant, normalizedName) ??
    getIcon("outlined", "help") ??
    '<svg viewBox="0 0 24 24"></svg>';

if (import.meta.env.DEV && !getIcon(variant, normalizedName)) {
    console.warn(
        `[Symbol] Icono no encontrado: variant='${variant}' name='${name}' normalizado='${normalizedName}'`,
    );
}
---

<span
    style={{
        color,
        width: size,
        height: size,
        pointerEvents: "none",
        ...attributes.style,
    }}
    {...attributes}
>
    <Fragment set:html={innerHTML} />
</span>

<style is:global>
    span > svg {
        width: inherit;
        height: inherit;
        fill: currentColor;
    }
</style>
